@using System.Web.UI.WebControls
@using TaskManager.Helpers
@using TaskManager.Models
@model TaskManager.Models.RecipTaskEditModel
@{
    ViewBag.Title = "Просмотр заявки";
    Layout = "~/Views/Recipient/RecipientLayout.cshtml";
}

<div class="container">
    <div class="col-md-8">
        <div class="task-text-view">
            <h4>Заявка #@Model.TaskId</h4>
            @Model.TaskText
        </div>

        <div id="comments">
            <div id="comments-update-panel"></div>
            <form method="POST" action="#">
                @Html.ValidationSummary(true)
                @Html.TextAreaGroupFor(x => x.NewComment, String.Empty, "new-comment-id", "Новый комментарий к заявке", 120)
                <div class="right">
                    <button type="button" class=" btn btn-primary" onclick="addNewComment()">Отправить</button>
                </div>
            </form>
        </div>
    </div>
    <div class="panel-group col-md-4 margin-top-30" id="accordion">
        <div class="panel panel-default">
            <div class="panel-heading">
                <h5 class="panel-title">
                    <a data-toggle="collapse" data-parent="#accordion" href="#details">Подробно</a>
                </h5>
            </div>
            <div id="details" class="panel-collapse collapse in">
                <div class="panel-body">
                    <p>Заявка подана: @Model.CreationDate.ToString(ModelHelper.DateTimeFormatFull)</p>
                    <p>Отправитель: @Model.SenderName</p>
                    <p>Адресована мне: @Model.AssignDateTime.ToString(ModelHelper.DateTimeFormatFull)</p>
                    <p>Установлен срок выполнения до: @Model.Deadline.ToString(ModelHelper.DateFormat)</p>
                    <p>Приоритет выполнения: @Model.PriorityName</p>
                    @if (Model.CompleteDate != null)
                    {
                        <p>Заявка выполнена: @Model.CompleteDate.Value.ToString(ModelHelper.DateTimeFormatFull)</p>
                    }


                </div>
            </div>
        </div>


        <div class="panel panel-default">
            <div class="panel-heading">
                <h5 class="panel-title">
                    <a data-toggle="collapse" data-parent="#accordion" href="#complete">@(Model.CompleteDate == null ? Html.Raw("Отметить как выполненную") : Html.Raw("Изменить результат выполнения"))</a>
                </h5>
            </div>
            <div id="complete" class="panel-collapse collapse">
                <div class="panel-body">
                    <form method="POST" action="@Url.Action("Edit")">
                        @Html.HiddenFor(x => x.TaskId)
                        @Html.TextAreaGroupFor(x => x.ResultComment, "Результат выполнения", "result-comment-id", "Результат", 120)

                        <div class="right">
                            @if (Model.CompleteDate.HasValue)
                            {
                                <a href="#" class="btn btn-danger danger" style="margin-right: 25px" onclick="location.href = '@Url.Action("UndoComplete", new { taskId = Model.TaskId })'">Отменить выполнение</a>
                            }

                            <button class=" btn btn-primary">@(Model.CompleteDate == null ? Html.Raw("Выполнено") : Html.Raw("Сохранить"))</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>










</div>
<script type="text/javascript">

    function addNewComment() {
        $.ajax({
            url: '@Url.Action("AddNewComment", "Comment")',
            type: "POST",
            data: JSON.stringify({
                text: $('#new-comment-id').val(),
                authorId: @WebSecurity.CurrentUserId,
                taskId: @Model.TaskId
                }),
            contentType: 'application/json; charset=utf-8',
            accepts: 'application/json',
            success: function(data) {
                if(data.result == "success") {
                    switchValidationErrorFor(false, "NewComment", "");
                    $('#new-comment-id').val('');
                    commentsUpdate();
                    scrollToNewComment();
                } else if (data.result == "maxLenghtError") {
                    switchValidationErrorFor(true, "NewComment", data.message);
                } else {
                    switchValidationErrorFor(false, "NewComment", "");
                }
            },
            complete: function() {

            },
            error: function() {
                alert('Произошла ошибка при создании комментария');
            }
        });
    }

    function switchValidationErrorFor(isError, property, errorMessage) {
        if(isError){
            $("span[data-valmsg-for='" + property + "']").removeClass("field-validation-valid");
            $("span[data-valmsg-for='" + property + "']").addClass("field-validation-error");
            $("span[data-valmsg-for='" + property + "']").html(errorMessage);
        } else {
            $("span[data-valmsg-for='" + property + "']").html("");
            $("span[data-valmsg-for='" + property + "']").removeClass("field-validation-error");
            $("span[data-valmsg-for='" + property + "']").addClass("field-validation-valid");
        }
    }

    function scrollToNewComment() {
        var target = $('.thread-item-sent:last');
        if (target.length) {
            $('html,body').animate({
                scrollTop: target.offset().top
            }, 1000);
        }
    }

    function commentsUpdate() {
        $.ajax({
            url: '@Url.Action("GetCommentsForTask", "Comment")',
            data: { taskId: '@Model.TaskId' },
            success: function (data) {
                $('#comments-update-panel').html(data);
            },
            complete: function () {
                                    
            }
        });
    }

    $(function() {
        commentsUpdate();
    });
    
</script>


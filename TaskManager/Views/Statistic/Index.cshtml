@model IEnumerable<TaskManager.Models.Task>
@{
    ViewBag.Title = "Статистика";
    Layout = "~/Views/RootLayout.cshtml";
}
<script type="text/javascript" src="@Url.Content("../../Scripts/Chart.js")"></script>
<script type="text/javascript" src="@Url.Content("../../Scripts/knockout-3.3.0.js")"></script>
<script type="text/javascript">
    var ViewModel = {
        selectedYear: ko.observable(new Date().getFullYear()),
        chartDataCompleteTasks: ko.observableArray([]),
        chartDataSendedTasks: ko.observableArray([]),
        lineChartData: ko.observable()
    };
    var barChart;
    var tasks = Array();
    @foreach (var task in @Model)
    {
        @:tasks.push({ acceptDate: parseDate("@if (task.AcceptCpmpleteDate.HasValue)
                                              {
                                                  @task.AcceptCpmpleteDate.Value
                                              }"), recipient: "@task.TaskRecipient.UserName", recipientFullName: "@task.TaskRecipient.UserFullName", sendDate: parseDate("@if (task.AssignDateTime.HasValue)
                                                                                                                                                                          {
                                                                                                                                                                              @task.AssignDateTime.Value
                                                                                                                                                                          }") })
    }

    function chartDataUpdate() {
        ViewModel.chartDataCompleteTasks([]);
        ViewModel.chartDataSendedTasks([]);
        ViewModel.lineChartData([]);
        for (var i = 0; i < 12; i++) {
            ViewModel.chartDataCompleteTasks.push(select(ViewModel.selectedYear(), i, 'complete'));
            ViewModel.chartDataSendedTasks.push(select(ViewModel.selectedYear(), i, 'send'));
        }
        ViewModel.lineChartData({
            labels: ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь',
                'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'],
            datasets: [
                {
                    label: "Поданные заявки",
                    fillColor: "rgba(255, 160, 32, 0.2)",
                    strokeColor: "rgba(255, 160, 32, 1)",
                    pointColor: "rgba(255, 160, 32, 1)",
                    pointStrokeColor: "#fff",
                    pointHighlightFill: "#fff",
                    pointHighlightStroke: "rgba(255, 160, 32, 1)",
                    data: ViewModel.chartDataSendedTasks()
                },
                {
                    label: "Выполненные заявки",
                    fillColor: "rgba(96, 255, 4, 0.2)",
                    strokeColor: "rgba(96, 255, 4, 1)",
                    pointColor: "rgba(96, 255, 4, 1)",
                    pointStrokeColor: "#fff",
                    pointHighlightFill: "#fff",
                    pointHighlightStroke: "rgba(96, 255, 4, 1)",
                    data: ViewModel.chartDataCompleteTasks()
                }
            ]
        });
        if (barChart != null && barChart != undefined) {
            for (var i = 0; i < ViewModel.lineChartData().datasets.length; i++) {
                for (var j = 0; j < barChart.datasets[i].bars.length; j++) {
                    barChart.datasets[i].bars[j].value = ViewModel.lineChartData().datasets[i].data[j];
                }
            }
            barChart.update();
        }

    }

    function select(year, month, type, recipUser) {
        var count = 0;
        for (var i = 0; i < tasks.length; i++) {
            if (year != undefined && month != undefined && recipUser != undefined) {
                if(type == 'complete'){
                    if (tasks[i].acceptDate.getFullYear() == year
                        && tasks[i].acceptDate.getMonth() == month
                        && tasks[i].recipient == recipUser) {
                        count++;
                    }
                }
                if (type == 'send') {
                    if (tasks[i].sendDate.getFullYear() == year
                        && tasks[i].sendDate.getMonth() == month
                        && tasks[i].recipient == recipUser) {
                        count++;
                    }
                }
            }
            if (year != undefined && month != undefined && recipUser == undefined) {
                if(type == 'complete'){
                    if (tasks[i].acceptDate.getFullYear() == year
                        && tasks[i].acceptDate.getMonth() == month) {
                        count++;
                    }
                }
                if (type == 'send') {
                    if (tasks[i].sendDate.getFullYear() == year
                        && tasks[i].sendDate.getMonth() == month) {
                        count++;
                    }
                }
            }
            if (year != undefined && month == undefined && recipUser != undefined) {
                if(type == 'complete'){
                    if (tasks[i].acceptDate.getFullYear() == year
                        && tasks[i].recipient == recipUser) {
                        count++;
                    }
                }
                if (type == 'send') {
                    if (tasks[i].sendDate.getFullYear() == year
                        && tasks[i].recipient == recipUser) {
                        count++;
                    }
                }
            }
            if (year != undefined && month == undefined && recipUser == undefined) {
                if(type == 'complete'){
                    if (tasks[i].acceptDate.getFullYear() == year) {
                        count++;
                    }
                }
                if (type == 'send') {
                    if (tasks[i].sendDate.getFullYear() == year) {
                        count++;
                    }
                }
            }
            if (year == undefined && month == undefined && recipUser != undefined) {
                if (tasks[i].recipient == recipUser) {
                    count++;
                }
            }
            if (year == undefined && month != undefined && recipUser == undefined) {
                if(type == 'complete'){
                    if (tasks[i].acceptDate.getMonth() == month) {
                        count++;
                    }
                }
                if (type == 'send') {
                    if (tasks[i].sendDate.getMonth() == month) {
                        count++;
                    }
                }
            }
            if (year == undefined && month != undefined && recipUser != undefined) {
                if(type == 'complete'){
                    if (tasks[i].acceptDate.getMonth() == month
                        && tasks[i].recipient == recipUser) {
                        count++;
                    }
                }
                if (type == 'send') {
                    if (tasks[i].sendDate.getMonth() == month
                        && tasks[i].recipient == recipUser) {
                        count++;
                    }
                }
            }
        }
        return count;
    }



    function parseDate(strDate) {
        var dateParts = strDate.split(/[\s\.]/);
        var date = new Date(dateParts[2], (dateParts[1] - 1), dateParts[0]);
        return date;
    }

    $(function () {
        chartDataUpdate();
        var ctx = document.getElementById("statisticChart").getContext("2d");
        barChart = new Chart(ctx).Bar(ViewModel.lineChartData(), {
            responsive: true
        });

        ko.applyBindings();
    });

</script>

<div class="container">
    <h4 class="center">Статистика выполнения заявок</h4>
    <div class="center">
        <div class="btn-group btn-group-sm" role="group">
            @foreach (var year in Model.Where(x => x.AssignDateTime.HasValue).Select(x => x.AssignDateTime.Value.Year).Union(Model.Where(x => x.AcceptCpmpleteDate.HasValue).Select(x => x.AcceptCpmpleteDate.Value.Year)).Distinct().OrderBy(x => x))
            {
                <button data-bind="click: function () { viewModel.selectedYear('@year'); chartDataUpdate(); }, css: { active: viewModel.selectedYear() == '@year'    }" type="button" class="btn btn-default">@year</button>
            }
        </div>
    </div>
    <canvas id="statisticChart" height="200" width="400"></canvas>
</div>
